"""'Role's SQLAlchemy model"""
from sqlalchemy import ForeignKey, UniqueConstraint
from sqlalchemy.ext.associationproxy import association_proxy
from sqlalchemy.orm import relationship

from JDISCTF.app import DB


class Role(DB.Model):
    """
    Role model

    A role defines the actions that an administrator is or is not allowed to perform for a given
    event. For example, an administrator needs the role "challenge designer" to be allowed to create
    challenges.
    """

    __tablename__ = 'Roles'

    id = DB.Column(DB.Integer, primary_key=True)
    """The unique ID of the role. Should be generated by the database. Used as primary key."""
    label = DB.Column(DB.String(64), unique=True)
    """The label of the role"""

    def __repr__(self):
        return '<Role id:{} label:{}'.format(self.id, self.label)


class RoleAssociation(DB.Model):
    """
    RoleAssociation model. This is an association table for the three-way relationship between
    events, roles and EventAdministrators.
    """

    __tablename__ = 'RoleAssociations'

    event_id = DB.Column(DB.Integer, ForeignKey('Events.id'), nullable=True, primary_key=True)
    """The ID of the Event that this row associates. Used as foreign key."""
    event_administrator_id = DB.Column(DB.Integer, ForeignKey('EventAdministrators.id'),
                                       nullable=True, primary_key=True)
    """The ID of the Administrator that this row associates. Used as foreign key."""
    role_id = DB.Column(DB.Integer, ForeignKey('Roles.id'), nullable=True, primary_key=True)
    """The ID of the Role that this row associates. Used as foreign key."""

    event = relationship('Event', backref='role_associations')
    event_administrator = relationship('EventAdministrator', back_populates='roles')
    administrator = association_proxy('event_administrator', 'administrator')
    role = relationship('Role', backref='role_associations')

    __table_args__ = (
        UniqueConstraint('event_id', 'event_administrator_id', 'role_id',
                         name='role_association_event_administrator_role_uc'),
    )

    def __repr__(self):
        return '<EventAdministrator event_id:{} administrator_id:{} role_id:{}>'\
            .format(self.id, self.administrator_id, self.role_id)
