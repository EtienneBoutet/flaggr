"""Participant's SQLAlchemy model"""

from __future__ import annotations

from typing import Optional

from sqlalchemy import ForeignKey
from sqlalchemy.ext.associationproxy import association_proxy
from sqlalchemy.orm import relationship

from JDISCTF.app import DB
from JDISCTF.models.team import Team


class Participant(DB.Model):
    """
    Participant model

    An event participant. A participant is an association between an event, a user, and optionally a team.
    """

    __tablename__ = 'Participants'

    id = DB.Column(DB.Integer, primary_key=True)
    """The unique ID of the participant. Should be generated by the database. Used as primary key."""
    event_id = DB.Column(DB.Integer, ForeignKey('Events.id'), nullable=True)
    """The ID of the event the participant is associated with. Used as a foreign key."""
    user_id = DB.Column(DB.Integer, ForeignKey('Users.id'), nullable=True)
    """The ID of the event the participant is associated with. Used as a foreign key."""

    teams = association_proxy('teamInfo', 'team')
    user = relationship('User', backref='participant', lazy='joined')

    def __repr__(self):
        return '<Participant id:{} event_id:{} user_id:{}>'.format(self.id, self.event_id, self.user_id)

    def get_team(self) -> Optional[Team]:
        """
        :return: The team of the participant, or none if the participant has no team.
        """
        return None if len(self.teams) == 0 else self.teams[0]
